---
import Layout from '../layouts/Layout.astro';
import PostCard from '../components/PostCard';
---

<Layout title="Post History - DreamNode Instagram Scheduler">
  <div class="py-6">
    <h1 class="text-3xl font-bold mb-6">Post History</h1>
    <p class="mb-6">View all your posts, both published and scheduled.</p>
    
    <div class="flex gap-2 mb-6">
      <button id="all-btn" class="btn btn-sm btn-primary">All</button>
      <button id="published-btn" class="btn btn-sm btn-outline">Published</button>
      <button id="scheduled-btn" class="btn btn-sm btn-outline">Scheduled</button>
    </div>
    
    <div class="bg-base-100 p-6 rounded-box shadow-lg">
      <div id="history-container">
        <div class="text-center py-12">
          <div class="loading loading-spinner loading-lg"></div>
          <p class="mt-4">Loading posts...</p>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  import { getPosts } from '../lib/api';
  import { render } from 'react-dom';
  import React, { useState, useEffect } from 'react';
  import PostCard from '../components/PostCard';
  
  const PostHistory = () => {
    const [posts, setPosts] = useState([]);
    const [filter, setFilter] = useState('all');
    
    useEffect(() => {
      // Get posts from localStorage (in a real app, this would fetch from GitHub)
      const allPosts = getPosts();
      setPosts(allPosts);
      
      // Set up filter buttons - using event delegation might be better in a larger app,
      // but direct listeners are fine for this example.
      const allBtn = document.getElementById('all-btn');
      const publishedBtn = document.getElementById('published-btn');
      const scheduledBtn = document.getElementById('scheduled-btn');
      
      const updateButtonClasses = (activeFilter) => {
        allBtn.classList.remove('btn-primary', 'btn-outline');
        publishedBtn.classList.remove('btn-primary', 'btn-outline');
        scheduledBtn.classList.remove('btn-primary', 'btn-outline');

        allBtn.classList.add(activeFilter === 'all' ? 'btn-primary' : 'btn-outline');
        publishedBtn.classList.add(activeFilter === 'published' ? 'btn-primary' : 'btn-outline');
        scheduledBtn.classList.add(activeFilter === 'scheduled' ? 'btn-primary' : 'btn-outline');
      };

      updateButtonClasses(filter); // Set initial classes

      allBtn.addEventListener('click', () => {
        setFilter('all');
        updateButtonClasses('all');
      });
      
      publishedBtn.addEventListener('click', () => {
        setFilter('published');
        updateButtonClasses('published');
      });
      
      scheduledBtn.addEventListener('click', () => {
        setFilter('scheduled');
        updateButtonClasses('scheduled');
      });

    }, []); // Empty dependency array means this runs once on mount
    
    const filteredPosts = posts.filter(post => {
      if (filter === 'all') return true;
      if (filter === 'published') return post.published;
      if (filter === 'scheduled') return !post.published;
      return true;
    });
    
    if (filteredPosts.length === 0) {
      return (
        <div class="text-center py-12">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto text-base-content/30" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
          </svg>
          <h3 class="text-xl font-bold mt-4">No posts found</h3>
          <p class="mt-2 text-base-content/70">
            {filter === 'all' ? 'Create a new post to get started' : 
             filter === 'published' ? 'No published posts yet' : 
             'No scheduled posts yet'}
          </p>
          {filter === 'all' || filter === 'scheduled' ? (
            <a href="/upload" class="btn btn-primary mt-4">Create New Post</a>
          ) : null}
        </div>
      );
    }
    
    return (
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {filteredPosts.map(post => (
          <PostCard 
            key={post.id} 
            post={post} 
            isPublished={post.published} 
          />
        ))}
      </div>
    );
  };
  
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById('history-container');
    if (container) {
      render(<PostHistory />, container);
    }
  });
</script>
